readme.txt
By: Ryan Chaffee
The Effect of Ancestry in Forensic Record Matching

This README contains a description of the files needed for running
the analysis in the above paper. The repo this readme pertain to includes all 
the files needed for the pipeline, including original data and scripts.

The record matching scripts are written to compute one record match score at a 
time i.e. the match score between a single SNP profile and a single STR profile
as determined by the allele frequency file, genotype probability file, and true
genotype file used as inputs for the record match function.

################################################################
########################### Overview ###########################
################################################################

Data: 2504 individuals typed at 18 CODIS markers as well as STRs and SNPs 
    present within a 1 megabase window centered at each CODIS locus. Phased and
    unphased VCFs are available within data/

   -SNPs/Imputed STRs: https://gymreklab.com/2018/03/05/snpstr_imputation.html


Step 1: Use STRUCTURE to get ancestry and allele frequency
        estimates for the ancestry estimation record match scheme

Step 2: Run CLUMPP to combine replicate STRUCTURE runs

Step 3: Use genotype_imputation/imputation_functions.R to generate reference
        panels and test sets for the null, known superpopulation, empirical, and
        ancestry estimation construction schemes

Step 4: Use genotype_imputation/imputation_functions.R and BEAGLE to phase test
        set SNP profiles and impute test set masked STRs for each record 
        matching scheme

Step 5: Use record_matching/af_extraction.R to generate allele frequency files
        for each individual in the test set

Step 6: Use record_matching/gp_extraction.R to generate genotype probability 
        files for each individual in the test set

Step 7: Use record_matching/rm_functions.R to compute the record matching scores
        for each SNP profile/STR profile pairing in the test set

Step 8: Use record_matching/rm_functions.R to compute match accuracies across
        four matching methods


################################################################
######################### Run STRUCTURE ########################
################################################################
STRUCTURE clusters the individuals by inferring their ancestry. We performed 
STRUCTURE clustering using a set of 3245 STR loci in addition to just using 
the 18 CODIS loci from 1000 Genomes. We perform 100 replicates of each to
ensure consistency of the results. 

Download STRUCTURE: 
https://web.stanford.edu/group/pritchardlab/structure_software/release_versions/v2.3.4/html/structure.html

Run STRUCTURE using the parameter files we included:
for i in {1..100} ; do 
    ./structure -m structure/codis/mainparams.boot -e structure/codis/extraparams30${i}.boot -K 3 -i structure/codis/codis.str -o structure/codis/output/codis_{i}.str
    ./structure -m structure/str/mainparams.boot -e structure/str/extraparams30${i}.boot -K 3 -i structure/str/all_str.str -o structure/str/output/str_{i}.str
done


################################################################
########################## Run CLUMPP ##########################
################################################################
CLUMPP resolves label switching issues arising from 100 separate STRUCTURE 
replicates switching labels of the clusters to match similar clusters in other
runs.

Download CLUMPP: 
https://rosenberglab.stanford.edu/clumpp.html

Generate CLUMPP input files by running these lines of code:
    bash clumpp/get_codis_ind_file.sh
    bash clumpp/get_codis_pop_file.sh
    bash clumpp/get_str_ind_file.sh
    bash clumpp/get_str_pop_file.sh

Run CLUMPP using the provided parameter files

./CLUMPP clumpp/codis/codis_ind_params.txt
./CLUMPP clumpp/codis/codis_pop_params.txt
./CLUMPP clumpp/str/str_ind_params.txt
./CLUMPP clumpp/str/str_pop_params.txt

You will need to manually inspect the CLUMPP outfiles to determine which cluster
labels correspond to which superpopulation. After doing so, create the 
permutation files by copying the permutation table in each *miscfile.txt that
is generated by CLUMPP. Write a header consisting of the superpopulations in the
order you determine to be accurate based on the prior inspection.

################################################################
################## Generate Reference Panels ###################
################################################################
